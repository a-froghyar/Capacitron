{
    "github_branch":"* dev",
        "run_name": "hifigan-blizzard-fine-tuning",
        "run_description": "hifigan fine tune",
    
        // AUDIO PARAMETERS
        "audio":{
            // Audio processing parameters
            "num_mels": 80,         // size of the mel spec frame. 
            "fft_size": 1024,       // number of stft frequency levels. Size of the linear spectogram frame.
            "sample_rate": 24000,  // DATASET-RELATED: wav sample-rate. If different than the original data, it is resampled.
            "win_length": 1024,     // stft window length in ms.
            "hop_length": 256,      // stft window hop-lengh in ms.
            "frame_length_ms": null,  // stft window length in ms.If null, 'win_length' is used.
            "frame_shift_ms": null,   // stft window hop-lengh in ms. If null, 'hop_length' is used.
            "preemphasis": 0.0,    // pre-emphasis to reduce spec noise and make it more structured. If 0.0, no -pre-emphasis.
            "min_level_db": -100,   // normalization range
            "ref_level_db": 20,     // reference level db, theoretically 20db is the sound of air.
            "power": 1.5,           // value to sharpen wav signals after GL algorithm.
            "griffin_lim_iters": 60,// #griffin-lim iterations. 30-60 is a good range. Larger the value, slower the generation.
            "log_func": "np.log10",
            "do_sound_norm": true,
            "stft_pad_mode": "reflect",
            // Normalization parameters
            "signal_norm": true,    // normalize the spec values in range [0, 1]
            "symmetric_norm": true, // move normalization to range [-1, 1]
            "max_norm": 4.0,          // scale normalization to range [-max_norm, max_norm] or [0, max_norm]
            "clip_norm": true,      // clip normalized values into the range.
            "mel_fmin": 80.0,         // minimum freq level for mel-spec. ~50 for male and ~95 for female voices. Tune for dataset!!
            "mel_fmax": 12000.0,        // maximum freq level for mel-spec. Tune for dataset!!
            "spec_gain": 20.0, 
            "do_trim_silence": false,  // enable trimming of slience of audio as you load it. LJspeech (false), TWEB (false), Nancy (true)
            "trim_db": 60,          // threshold for timming silence. Set this according to your dataset.
            "stats_path": null    // DO NOT USE WITH MULTI_SPEAKER MODEL. scaler stats file computed by 'compute_statistics.py'. If it is defined, mean-std based notmalization is used and other normalization params are ignored
        },
    
        // DISTRIBUTED TRAINING
        "distributed":{
            "backend": "nccl",
            "url": "tcp:\/\/localhost:54324"
        },
    
        // MODEL PARAMETERS
        "use_pqmf": false,
    
        // LOSS PARAMETERS
        "use_stft_loss": false,
        "use_subband_stft_loss": false,
        "use_mse_gan_loss": true,
        "use_hinge_gan_loss": false,
        "use_feat_match_loss": true,  // use only with melgan discriminators
        "use_l1_spec_loss": true,
    
        // loss weights
        "stft_loss_weight": 0,
        "subband_stft_loss_weight": 0,
        "mse_G_loss_weight": 1,
        "hinge_G_loss_weight": 0,
        "feat_match_loss_weight": 108, // number_feature(=54) * 2
        "l1_spec_loss_weight": 45,
    
        // multiscale stft loss parameters
        // "stft_loss_params": {
        //     "n_ffts": [1024, 2048, 512],
        //     "hop_lengths": [120, 240, 50],
        //     "win_lengths": [600, 1200, 240]
        // },
    
        "l1_spec_loss_params": {
            "use_mel": true,
            "sample_rate": 24000,
            "n_fft": 1024,
            "hop_length": 256,
            "win_length": 1024,
            "n_mels": 80,
            "mel_fmin": 0.0,
            "mel_fmax": null
        },
    
        "target_loss": "avg_G_loss",  // loss value to pick the best model to save after each epoch
    
        // DISCRIMINATOR
        "discriminator_model": "hifigan_discriminator",
        //"discriminator_model_params":{
        //    "peroids": [2, 3, 5, 7, 11],
        //    "base_channels": 16,
        //    "max_channels":512,
        //    "downsample_factors":[4, 4, 4]
        //},
        "steps_to_start_discriminator": 0,      // steps required to start GAN trainining.1
        "diff_samples_for_G_and_D": false,   // draw a new sample from the dataset for the D pass.
    
        // GENERATOR
        "generator_model": "hifigan_generator",
        "generator_model_params": {
            "upsample_factors":[8,8,2,2],
            "upsample_kernel_sizes": [16,16,4,4],
            "upsample_initial_channel": 128,
            "resblock_kernel_sizes": [3,7,11],
            "resblock_dilation_sizes": [[1,3,5], [1,3,5], [1,3,5]],
            "resblock_type": "1"
        },
    
        // DATASET
        "data_path": "/home/big-boy/Data/blizzard2013/segmented/EXTRACTED/wav",
        "feature_path": "/home/big-boy/Data/blizzard2013/segmented/EXTRACTED/mel",
    
        "seq_len": 8192,
        // "max_seq_len": 110,
        "pad_short": 2000,
        "conv_pad": 0,
        "use_noise_augment": false,
        "use_cache": true,
        "reinit_layers": [],    // give a list of layer names to restore from the given checkpoint. If not defined, it reloads all heuristically matching layers.
    
        // TRAINING
        "batch_size": 110,       // Batch size for training. Lower values than 32 might cause hard to learn attention. It is overwritten by 'gradual_training'.
    
        // VALIDATION
        "run_eval": true,
        "test_delay_epochs": 0,  //Until attention is aligned, testing only wastes computation time.
        "test_sentences_file": null,  // set a file to load sentences to be used for testing. If it is null then we use default english sentences.
    
        // OPTIMIZER
        "epochs": 10000,                // total number of epochs to train.
        "wd": 0.0,                // Weight decay weight.
        "gen_clip_grad": -1,      // Generator gradient clipping threshold. Apply gradient clipping if > 0
        "disc_clip_grad": -1,     // Discriminator gradient clipping threshold.
        "lr_gen": 0.0002,                  // Initial learning rate. If Noam decay is active, maximum learning rate.
        "lr_disc": 0.0002,
        "optimizer": "AdamW",
        "optimizer_params":{
            "betas": [0.8, 0.99],
            "weight_decay": 0.01
        },
        "lr_scheduler_gen": "ExponentialLR",   // one of the schedulers from https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
        "lr_scheduler_gen_params": {
           "gamma": 0.999,
            "last_epoch": -1
        },
        "lr_scheduler_disc": "ExponentialLR",   // one of the schedulers from https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
        "lr_scheduler_disc_params": {
              "gamma": 0.999,
            "last_epoch": -1
        },
    
        // TENSORBOARD and LOGGING
        "print_step": 100,       // Number of steps to log traning on console.
        "print_eval": false,     // If True, it prints loss values for each step in eval run.
        "save_step": 10000,      // Number of training steps expected to plot training stats on TB and save model checkpoints.
        "checkpoint": true,     // If true, it saves checkpoints per "save_step"
        "tb_model_param_stats": false,     // true, plots param stats per layer on tensorboard. Might be memory consuming, but good for debugging.
    
        // DATA LOADING
        "num_loader_workers": 16,        // number of training data loader processes. Don't set it too big. 4-8 are good values.
        "num_val_loader_workers": 16,    // number of evaluation data loader processes.
        "eval_split_size": 10,
    
        // PATHS
        "output_path": "/home/big-boy/Models/BlizzardVocoder/"
    }
    
    